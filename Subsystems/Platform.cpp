// RobotBuilder Version: 0.0.2
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// C++ from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in th future.
#include "Platform.h"
#include "../Robotmap.h"
#include "../Commands/pTilt.h"
#include <math.h>
#define PI 3.14159
#define k .75
Platform::Platform() : Subsystem("Platform") {
	// BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS
	vertical = RobotMap::platformVertical;
    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS
	
	accel = RobotMap::platformAccel;
}
    
void Platform::InitDefaultCommand() {
	// Set the default command for a subsystem here.
	//SetDefaultCommand(new MySpecialCommand());
	// BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DEFAULT_COMMAND
    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DEFAULT_COMMAND
	
	filteredAngle = 0;
	angle = 25;
}
// Put methods for controlling this subsystem
// here. Call these from Commands.
float Platform::GetAngle()
{
	float Zaxis = accel->GetAcceleration(ADXL345_SPI::kAxis_Z);
	float Yaxis = accel->GetAcceleration(ADXL345_SPI::kAxis_Y);
	return (atan2(-Yaxis, Zaxis) * 180 / PI);
}
float Platform::GetFilteredAngle()
{
	float rawAngle = GetAngle();
	filteredAngle = filteredAngle * k + rawAngle * (1-k);
	
	return filteredAngle;
}
