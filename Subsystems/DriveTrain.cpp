// RobotBuilder Version: 0.0.2
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// C++ from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in th future.
#include "DriveTrain.h"
#include "../Robotmap.h"
#include "../Commands/dDriveMecanum.h"
DriveTrain::DriveTrain() : Subsystem("DriveTrain") {
	// BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS
	leftFront = RobotMap::driveTrainLeftFront;
	leftRear = RobotMap::driveTrainLeftRear;
	rightFront = RobotMap::driveTrainRightFront;
	rightRear = RobotMap::driveTrainRightRear;
	robotDrive4 = RobotMap::driveTrainRobotDrive4;
    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS
	
	robotDrive4->SetInvertedMotor(robotDrive4->kFrontRightMotor, true);
	robotDrive4->SetInvertedMotor(robotDrive4->kRearRightMotor, true);
	//robotDrive4->SetInvertedMotor(robotDrive4->kFrontLeftMotor, false);
	//robotDrive4->SetInvertedMotor(robotDrive4->kRearLeftMotor, false);
	
	motorsInverted = true;
}
    
void DriveTrain::InitDefaultCommand() {
	// Set the default command for a subsystem here.
	//SetDefaultCommand(new MySpecialCommand());
	// BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DEFAULT_COMMAND
	SetDefaultCommand(new dDriveMecanum());
    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DEFAULT_COMMAND
}
// Put methods for controlling this subsystem
// here. Call these from Commands.
void DriveTrain::SetSpeed(float speed, float curve)
{
	robotDrive4->SetInvertedMotor(robotDrive4->kFrontRightMotor, false);
	robotDrive4->SetInvertedMotor(robotDrive4->kRearRightMotor, false);
	
	if(speed != 0)
		robotDrive4->Drive(-1*speed, curve);
	else
		robotDrive4->SetLeftRightMotorOutputs(curve, -curve);
}
void DriveTrain::TankDrive(Joystick* left, Joystick* right)
{
	robotDrive4->TankDrive(left, right, true);
}
void DriveTrain::ArcadeDrive(float speed, float curve)
{
	//robotDrive4->ArcadeDrive(joystick, false);
	
	if(motorsInverted)
		speed *= -1;
	
	robotDrive4->ArcadeDrive(speed, curve, false);
}
void DriveTrain::MecanumDrive(float x, float y, float rotation)
{
	robotDrive4->SetInvertedMotor(robotDrive4->kFrontRightMotor, true);
	robotDrive4->SetInvertedMotor(robotDrive4->kRearRightMotor, true);
	
	robotDrive4->MecanumDrive_Cartesian(x, y, rotation);
}
void DriveTrain::InvertMotors()
{
	motorsInverted = !motorsInverted;
}
