// RobotBuilder Version: 0.0.2
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// C++ from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in th future.
#include "Shooter.h"
#include "../Robotmap.h"
#include "SmartDashboard/SmartDashboard.h"
#include "LiveWindow/LiveWindow.h"
#include "../Commands/fShooterOn.h"
const float k = 0.1f;
// BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=PID
Shooter::Shooter() : PIDSubsystem("Shooter", 0.003, 1.0E-4, 0.0) {
	SetAbsoluteTolerance(0.2);
	GetPIDController()->SetContinuous(true);
	LiveWindow::GetInstance()->AddActuator("Shooter", "PIDSubsystem Controller", GetPIDController());
    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=PID
	// BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS
	motor = RobotMap::shooterMotor;
	gearTooth1 = RobotMap::shooterGearTooth1;
	loader = RobotMap::shooterLoader;
	shooterLimit = RobotMap::shooterShooterLimit;
	verticalLimit = RobotMap::shooterVerticalLimit;
    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS
	
	gearTooth = RobotMap::shooterGearTooth;
	
	// Use these to get going:
	// SetSetpoint() -  Sets where the PID controller should move the system
	//                  to
	// Enable() - Enables the PID controller.
}
double Shooter::ReturnPIDInput() {
	// Return your input value for the PID loop
	// e.g. a sensor, like a potentiometer:
	// yourPot->SetAverageVoltage() / kYourMaxVoltage;
	
	float currentRPM = 30/12/gearTooth->GetPeriod();
	
	if(count > 100)
		lastRPM = k * currentRPM + (1-k) * lastRPM;
	else
		lastRPM = currentRPM;
	
	count++;
	//return lastRPM;
	return currentRPM;
}
void Shooter::UsePIDOutput(double output) {
	// Use output to drive your system, like a motor
	// e.g. yourMotor->Set(output);
	// BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=OUTPUT
	motor->PIDWrite(output);
    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=OUTPUT
	
	
	
	output1 = output;
}
void Shooter::InitDefaultCommand() {
	// Set the default command for a subsystem here.
	//setDefaultCommand(new MySpecialCommand());
	// BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DEFAULT_COMMAND
    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DEFAULT_COMMAND
	setPoint = 3000;
	lastRPM = 0;
}
double Shooter::GetRPM()
{
	return 30/12/gearTooth->GetPeriod();
}
void Shooter::SetSpeed(float speed)
{
	motor->Set(speed, 0);
}
