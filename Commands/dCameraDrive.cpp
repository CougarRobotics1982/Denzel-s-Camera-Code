// RobotBuilder Version: 0.0.2
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// C++ from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.
#include "dCameraDrive.h"
#define UP_ANGLE -0.6
dCameraDrive::dCameraDrive() {
	// Use requires() here to declare subsystem dependencies
	// eg. requires(chassis);
	// BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=REQUIRES
	Requires(Robot::driveTrain);
    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=REQUIRES
}
// Called just before this Command runs the first time
void dCameraDrive::Initialize() {
	Robot::sensors->ResetGyro();
	
	
	
}
// Called repeatedly when this Command is scheduled to run
void dCameraDrive::Execute() {
	//float xMove = Robot::camera->GetTargetx();
	//float k = .5f;
	m_need_angle = Robot::camera->GetTargetx()* 0.075;
	float cur_angle = Robot::sensors->GetGyro();
	m_error = m_need_angle - cur_angle;
	float x = m_error;
	std::cout<<"Need Angle = "<<m_need_angle<<std::endl;
	std::cout<<"Error = "<<m_error<<std::endl;
	std::cout<<"Cur_angle = "<<cur_angle<<std::endl;
	std::cout<<"X = "<<x<<std::endl;
	if (m_error >= 0.00000f)
		Robot::driveTrain->SetSpeed(0, -.25);
	else
		Robot::driveTrain->SetSpeed(0, 0.25);
	if (m_error < .001 && m_error > -.001)
	{
		m_need_vert = Robot::camera->GetTargety()*-1;
		up_error = m_need_vert - UP_ANGLE;
		vert_angle = 20.0f * up_error;
		if (up_error > .001)
		{
			Robot::platform->angle -= 0.1;
		}
		if (up_error < -.001)
		{
			Robot::platform->angle += 0.1;
		}
	}
	
/*	if(xMove > .3)
		Robot::driveTrain->SetSpeed(0,-.3);
	else if(xMove < -.3)
		Robot::driveTrain->SetSpeed(0,.3);
//	else if(xMove > .1 || xMove < -.1)
//		Robot::driveTrain->SetSpeed(0, -1*xMove);
	else
		Robot::driveTrain->SetSpeed(0, 0);
*/
	
	
	
}
// Make this return true when this Command no longer needs to run execute()
bool dCameraDrive::IsFinished() {
	if (up_error < .001 && up_error > -.001)
		return true;
	else
		return false;
}
// Called once after isFinished returns true
void dCameraDrive::End() {
	Robot::driveTrain->SetSpeed(0, 0);
}
// Called when another command which requires one or more of the same
// subsystems is scheduled to run
void dCameraDrive::Interrupted() {
	Robot::driveTrain->SetSpeed(0, 0);
}
