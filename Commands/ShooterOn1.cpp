// RobotBuilder Version: 0.0.2
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// C++ from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in th future.
#include "ShooterOn1.h"
#include <math.h>
ShooterOn1::ShooterOn1() {
	// Use requires() here to declare subsystem dependencies
	// eg. requires(chassis);
	// BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=REQUIRES
	Requires(Robot::shooter1);
    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=REQUIRES
}
// Called just before this Command runs the first time
void ShooterOn1::Initialize() {
	Robot::shooter->setPoint = 3300;
	
	/*Robot::shooter->motor->Set(.7);
	k = 1.0f/4500.0f;
	count = 0;*/
	RPMsum = 0;
}
// Called repeatedly when this Command is scheduled to run
void ShooterOn1::Execute() {
	/*if(Robot::shooter->setPoint == 0)
		Robot::shooter->motor->Set(0, 0);
	else
	{
		float rpm = Robot::shooter->GetRPM();
		if(count >= 10 && count < 20)
			RPMsum += rpm;
		else if(count == 20)
		{
			rpm = RPMsum / 10;
			RPMsum = 0;
			count = 0;
			
			float error = rpm/Robot::shooter->setPoint;
			
			if(rpm > 100 && (error < 1.5 && error > .5))
			{
				error = (error-1)/2 + 1;
				k = k/error;
				
			}
			
			printf("RPM: %f Set Point: %d K: %f Error: %f\n",
								rpm, Robot::shooter->setPoint, k, error);
		}
		
		float motorOutput = Robot::shooter->setPoint * k;
		Robot::shooter->motor->Set(motorOutput,0);
	}
	
	float rpm = Robot::shooter->GetRPM();
	float motorspeed = Robot::shooter->motor->Get();
	if(Robot::shooter->setPoint < rpm - 25)
	{
		Robot::shooter->motor->Set( motorspeed -.005 ,0);
	}
	if(Robot::shooter->setPoint > rpm + 25)
	{
		Robot::shooter->motor->Set( motorspeed +.005 ,0);
	}
	
	printf("RPM: %f Set Point: %d \n",
									rpm, Robot::shooter->setPoint);
	*/
	
	float sp = Robot::shooter1->speed;
	float rpm = Robot::shooter->GetRPM();
	
	RPMsum += (int) (rpm/10);
	
	Robot::shooter->motor->Set(sp);
	
	if(count%10 == 0)
	{
		printf("RPM: %i Speed: %f\n", RPMsum, sp);
		Robot::shooter1->rpm = RPMsum;
		RPMsum = 0;
	}
	
	count++;
}
// Make this return true when this Command no longer needs to run execute()
bool ShooterOn1::IsFinished() {
			return false;
}
// Called once after isFinished returns true
void ShooterOn1::End() {
	Robot::shooter->motor->Set(0, 0);
}
// Called when another command which requires one or more of the same
// subsystems is scheduled to run
void ShooterOn1::Interrupted() {
	Robot::shooter->motor->Set(0, 0);
}
